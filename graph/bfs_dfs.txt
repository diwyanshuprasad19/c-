code:

#include <iostream>
#include <vector>
#include <queue>

using namespace std;

class Graph {
    int V;  // Number of vertices
    vector<vector<int>> adj; // Adjacency list

public:
    Graph(int V) {
        this->V = V;
        adj.resize(V);
    }

    // Function to add an edge to the graph
    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);  // Uncomment this for an undirected graph
    }

    // BFS Traversal
    void BFS(int start) {
        vector<bool> visited(V, false);
        queue<int> q;
        
        visited[start] = true;
        q.push(start);
        
        while (!q.empty()) {
            int node = q.front();
            q.pop();
            cout << node << " ";

            for (int neighbor : adj[node]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    q.push(neighbor);
                }
            }
        }
        cout << endl;
    }

    // DFS Traversal
    void DFSUtil(int node, vector<bool> &visited) {
        visited[node] = true;
        cout << node << " ";

        for (int neighbor : adj[node]) {
            if (!visited[neighbor]) {
                DFSUtil(neighbor, visited);
            }
        }
    }

    void DFS(int start) {
        vector<bool> visited(V, false);
        DFSUtil(start, visited);
        cout << endl;
    }
};

int main() {
    Graph g(6);

    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 5);

    cout << "BFS starting from node 0: ";
    g.BFS(0);

    cout << "DFS starting from node 0: ";
    g.DFS(0);

    return 0;
}


TIme and space compelxity how
Time and Space Complexity Analysis of BFS and DFS
1️⃣ Breadth-First Search (BFS)
Time Complexity
Each vertex is enqueued once and dequeued once → O(V)
Each edge is traversed once → O(E)
Total Time Complexity: O(V + E)
Space Complexity
Adjacency list storage: O(V + E)
Visited array: O(V)
Queue storage: O(V) (in the worst case)
Total Space Complexity: O(V + E)
Step-by-step analysis:
We use a queue for traversal.
We traverse each vertex once, marking it as visited.
We visit each edge exactly once (hence O(E) time for edges).
The auxiliary space (queue) is O(V) in the worst case.
2️⃣ Depth-First Search (DFS)
Time Complexity
Each vertex is visited once → O(V)
Each edge is traversed once → O(E)
Total Time Complexity: O(V + E)
Space Complexity
Adjacency list storage: O(V + E)
Visited array: O(V)
Recursive stack: O(V) (in the worst case, for a skewed tree)
Total Space Complexity: O(V + E)
Step-by-step analysis:
We use recursion instead of a queue.
Each vertex is visited once, contributing O(V).
Each edge is visited once, adding O(E).
Recursive function calls require O(V) space in the worst case.
Comparison Table: BFS vs DFS
Traversal Algorithm	Time Complexity	Space Complexity	Best Use Case
BFS (Queue-based)	O(V + E)	O(V + E)	Shortest path in an unweighted graph
DFS (Recursive)	O(V + E)	O(V + E) (O(V) for recursion)	Connectivity checking, Topological sorting
Summary
BFS uses a queue → Good for shortest paths in unweighted graphs.
DFS uses recursion (stack) → Useful for detecting cycles, topological sorting, etc.
Both have the same time complexity: O(V + E).
DFS may have higher space complexity in recursion-heavy cases (O(V) for recursive call stack).
