article:https://medium.com/@omerhalidcinar/building-your-own-hashmap-in-c-open-addressing-separate-chaining-implementations-ead22ca955c2

code:
Open Addressing:
#include <bits/stdc++.h>
using namespace std;

// Define the HashMap with Open Addressing and Linear Probing
template<typename K, typename V>
class OpenAddressingHashMap {
private:
    struct Entry {
        K key;
        V value;
        bool isOccupied;
        bool isDeleted;

        Entry() : isOccupied(false), isDeleted(false) {}
    };

    vector<Entry> table;
    int capacity;
    int size;

    int hash(const K& key) const {
        //hash<K>{} is an instance of the standard hash function in C++. 
        //It is part of the Standard Library (std) and is used to generate hash values for objects of type K.
        //It is defined in the <functional> header.
        return hash<K>{}(key) % capacity;
    }

public:
    OpenAddressingHashMap(int cap = 8) : capacity(cap), size(0) {
        table.resize(capacity);
    }

    void insert(const K& key, const V& value) {
        if (size >= capacity / 2) resize();

        int idx = hash(key);
        while (table[idx].isOccupied && !table[idx].isDeleted && table[idx].key != key) {
            idx = (idx + 1) % capacity; // Linear probing
        }

        if (!table[idx].isOccupied || table[idx].isDeleted) {
            table[idx].key = key;
            table[idx].value = value;
            table[idx].isOccupied = true;
            table[idx].isDeleted = false;
            ++size;
        } else {
            table[idx].value = value; // Update existing value
        }
    }

    optional<V> get(const K& key) const {
        int idx = hash(key);
        while (table[idx].isOccupied) {
            if (!table[idx].isDeleted && table[idx].key == key) {
                return table[idx].value;
            }
            idx = (idx + 1) % capacity; // Linear probing
        }
        return nullopt;
    }

    void remove(const K& key) {
        int idx = hash(key);
        while (table[idx].isOccupied) {
            if (!table[idx].isDeleted && table[idx].key == key) {
                table[idx].isDeleted = true;
                --size;
                return;
            }
            idx = (idx + 1) % capacity; // Linear probing
        }
    }

private:
    void resize() {
        int newCapacity = capacity * 2;
        vector<Entry> newTable(newCapacity);

        for (const auto& entry : table) {
            if (entry.isOccupied && !entry.isDeleted) {
                int idx = hash<K>{}(entry.key) % newCapacity;
                while (newTable[idx].isOccupied) {
                    idx = (idx + 1) % newCapacity;
                }
                newTable[idx] = entry;
            }
        }

        table = move(newTable);
        capacity = newCapacity;
    }
};

// Usage example
int main() {
    OpenAddressingHashMap<int, string> map;
    map.insert(1, "One");
    map.insert(2, "Two");
    map.insert(3, "Three");

    auto result = map.get(2);
    if (result.has_value()) {
        cout << "Key 2 has value: " << result.value() << endl;
    }

    map.remove(2);
    result = map.get(2);
    if (!result.has_value()) {
        cout << "Key 2 has been removed." << endl;
    }

    return 0;
}





**************************************************
seperate chaining:


#include <bits/stdc++.h>
using namespace std;

// Define the HashMap with Separate Chaining
template<typename K, typename V>
class SeparateChainingHashMap {
private:
    struct Entry {
        K key;
        V value;
        Entry(const K& k, const V& v) : key(k), value(v) {}
    };

    vector<list<Entry>> table;
    int capacity;
    int size;

    int hash(const K& key) const {
        return hash<K>{}(key) % capacity;
    }

public:
    SeparateChainingHashMap(int cap = 8) : capacity(cap), size(0) {
        table.resize(capacity);
    }

    void insert(const K& key, const V& value) {
        int idx = hash(key);
        for (auto& entry : table[idx]) {
            if (entry.key == key) {
                entry.value = value; // Update value if key exists
                return;
            }
        }
        table[idx].emplace_back(key, value);
        ++size;
    }

    optional<V> get(const K& key) const {
        int idx = hash(key);
        for (const auto& entry : table[idx]) {
            if (entry.key == key) return entry.value;
        }
        return nullopt;
    }

    void remove(const K& key) {
        int idx = hash(key);
        for (auto it = table[idx].begin(); it != table[idx].end(); ++it) {
            if (it->key == key) {
                table[idx].erase(it);
                --size;
                return;
            }
        }
    }
};

// Usage example
int main() {
    SeparateChainingHashMap<int, string> map;
    map.insert(1, "One");
    map.insert(2, "Two");
    map.insert(3, "Three");

    auto result = map.get(2);
    if (result.has_value()) {
        cout << "Key 2 has value: " << result.value() << endl;
    }

    map.remove(2);
    result = map.get(2);
    if (!result.has_value()) {
        cout << "Key 2 has been removed." << endl;
    }

    return 0;
}



why and when
