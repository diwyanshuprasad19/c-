sol:
https://jbseg.medium.com/c-unordered-map-under-the-hood-9540cec4553a


code:
insertion, deletion, and lookup in O(1)

#include <iostream>
#include <list>
#include <vector>

using namespace std;

class MyUnorderedMap {
private:
    vector<list<pair<int, int>>> buckets; // Array of linked lists (separate chaining)
    int bucket_size;     // Number of buckets
    int total_elements;  // Total elements in the hash map
    float max_load_factor; // Max load factor (default is 1.0)

    int hash(int key) {
        return key % bucket_size; // Simple modulus hash function
    }

    void rehashIfNeeded() {
        if ((float)total_elements / bucket_size <= max_load_factor) {
            return;
        }
        int new_bucket_size = bucket_size * 2;
        vector<list<pair<int, int>>> new_buckets(new_bucket_size);

        for (int i = 0; i < bucket_size; i++) {
            for (auto &kv_pair : buckets[i]) {
                int new_index = kv_pair.first % new_bucket_size;
                new_buckets[new_index].push_back(kv_pair);
            }
        }

        buckets = move(new_buckets);
        bucket_size = new_bucket_size;
    }

public:
    MyUnorderedMap(int initial_size = 10, float load_factor = 1.0) {
        bucket_size = initial_size;
        max_load_factor = load_factor;
        total_elements = 0;
        buckets.resize(bucket_size);
    }

    void insert(int key, int value) {
        int index = hash(key);

        // Check if key exists
        for (auto &kv : buckets[index]) {
            if (kv.first == key) {
                kv.second = value; // Update existing key
                return;
            }
        }

        // Insert new key-value pair
        buckets[index].push_back({key, value});
        total_elements++;

        rehashIfNeeded();
    }

    bool find(int key) {
        int index = hash(key);

        for (auto &kv : buckets[index]) {
            if (kv.first == key) {
                return true;
            }
        }
        return false;
    }

    void erase(int key) {
        int index = hash(key);
        auto &list_at_index = buckets[index];

        for (auto it = list_at_index.begin(); it != list_at_index.end(); it++) {
            if (it->first == key) {
                list_at_index.erase(it);
                total_elements--;
                return;
            }
        }
    }

    void display() {
        for (int i = 0; i < bucket_size; i++) {
            cout << "Bucket " << i << ": ";
            for (auto &kv : buckets[i]) {
                cout << "[" << kv.first << ": " << kv.second << "] -> ";
            }
            cout << "NULL\n";
        }
    }
};

int main() {
    MyUnorderedMap myMap(5); // Initial bucket size of 5

    myMap.insert(10, 100);
    myMap.insert(15, 200);
    myMap.insert(20, 300);
    myMap.insert(25, 400);
    myMap.insert(30, 500);

    cout << "Initial Hash Table:\n";
    myMap.display();

    cout << "\nFinding key 20: " << (myMap.find(20) ? "Found" : "Not Found") << endl;
    cout << "Finding key 99: " << (myMap.find(99) ? "Found" : "Not Found") << endl;

    cout << "\nDeleting key 15...\n";
    myMap.erase(15);
    myMap.display();

    return 0;
}

Operation	Average Complexity	Worst-case Complexity
insert	O(1) amortized	O(n) (when rehashing happens)
find	O(1) average	O(n) (worst case: all elements in one bucket)
erase	O(1) average	O(n) (worst case: all elements in one bucket)
rehash	O(n) (rare)	O(n)