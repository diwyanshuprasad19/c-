article:https://medium.com/@muskansanghai/understanding-binary-search-tree-bst-in-c-3bdcb4e61f24

code:
Defining the Node Structure
cpp
Copy
Edit
#include <iostream>
using namespace std;

class TreeNode {
public:
    int data;
    TreeNode* left;
    TreeNode* right;
    
    // Constructor
    TreeNode(int val) {
        data = val;
        left = nullptr;
        right = nullptr;
    }
};
Inserting a Node
cpp
Copy
Edit
TreeNode* insert(TreeNode* root, int val) {
    if (root == nullptr) {
        return new TreeNode(val); // Create a new node if root is empty
    }
    // Recursively find the correct position for insertion
    if (val < root->data) {
        root->left = insert(root->left, val);
    } else if (val > root->data) {
        root->right = insert(root->right, val);
    }
    return root; // Return the updated tree
}
Searching for a Node
cpp
Copy
Edit
TreeNode* search(TreeNode* root, int val) {
    if (root == nullptr || root->data == val) {
        return root; // Return the node if found
    }
    // Recursively search in the left or right subtree
    if (val < root->data) {
        return search(root->left, val);
    }
    return search(root->right, val);
}
Finding the Minimum Value Node (Helper Function)
cpp
Copy
Edit
TreeNode* findMin(TreeNode* node) {
    while (node && node->left != nullptr) {
        node = node->left;
    }
    return node;
}
Deleting a Node
cpp
Copy
Edit
TreeNode* deleteNode(TreeNode* root, int val) {
    if (root == nullptr) return root;

    // Traverse to the node to be deleted
    if (val < root->data) {
        root->left = deleteNode(root->left, val);
    } else if (val > root->data) {
        root->right = deleteNode(root->right, val);
    } else {
        // Node found, now delete it

        // Case 1: No child (leaf node)
        if (root->left == nullptr && root->right == nullptr) {
            delete root;
            return nullptr;
        }
        // Case 2: One child
        if (root->left == nullptr) {
            TreeNode* temp = root->right;
            delete root;
            return temp;
        } else if (root->right == nullptr) {
            TreeNode* temp = root->left;
            delete root;
            return temp;
        }
        // Case 3: Two children
        TreeNode* temp = findMin(root->right); // Find the in-order successor
        root->data = temp->data; // Copy the successor's value to the current node
        root->right = deleteNode(root->right, temp->data); // Delete the successor
    }
    return root; // Return the updated root
}